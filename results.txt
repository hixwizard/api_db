============================= test session starts =============================
platform win32 -- Python 3.9.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- E:\Dev\api_yamdb\venv\Scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: E:\Dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 80 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] FAILED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] FAILED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  8%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] FAILED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] FAILED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] FAILED [ 13%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] FAILED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 17%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user FAILED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin FAILED [ 21%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 26%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] FAILED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed FAILED [ 42%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 46%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_me_get PASSED       [ 48%]
tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed PASSED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch PASSED  [ 51%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0] PASSED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1] PASSED [ 53%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2] FAILED [ 55%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3] PASSED [ 56%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4] PASSED [ 57%]
tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user PASSED [ 61%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 63%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 65%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin PASSED [ 66%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin PASSED [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 68%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 70%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 72%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete PASSED     [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission PASSED [ 76%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 78%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 80%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation FAILED [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission FAILED [ 82%]
tests/test_04_title.py::Test04TitleAPI::test_06_titles_detail_put_not_allowed FAILED [ 83%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 85%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post FAILED     [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get FAILED [ 87%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user FAILED [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin FAILED [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_06_reviews_detail_put_not_allowed FAILED [ 91%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 93%]
tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get FAILED [ 95%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete FAILED [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator FAILED [ 97%]
tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_07_comment_detail_put_not_allowed FAILED [100%]

================================== FAILURES ===================================
_ Test00UserRegistration.test_00_singup_length_and_simbols_validation[data0-messege0] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E98E679D0>
client = <django.test.client.Client object at 0x0000019E98E8AA00>
data = {'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake', 'username': 'valid-username'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_username_and_email_fields
    )
    def test_00_singup_length_and_simbols_validation(self, client,
                                                     data, messege,
                                                     django_user_model):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = client.post(self.URL_SIGNUP, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_SIGNUP, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/auth/signup/` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.
E       assert 200 == <HTTPStatus.BAD_REQUEST: 400>
E         +200
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:96: AssertionError
_ Test00UserRegistration.test_00_singup_length_and_simbols_validation[data2-messege2] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E98F0F5E0>
client = <django.test.client.Client object at 0x0000019E98E837F0>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\Z',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_username_and_email_fields
    )
    def test_00_singup_length_and_simbols_validation(self, client,
                                                     data, messege,
                                                     django_user_model):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = client.post(self.URL_SIGNUP, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_SIGNUP, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/auth/signup/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\Z
E       assert 200 == <HTTPStatus.BAD_REQUEST: 400>
E         +200
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:96: AssertionError
____________ Test00UserRegistration.test_00_valid_data_user_signup ____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E98E8A970>
client = <django.test.client.Client object at 0x0000019E98EA5C40>
django_user_model = <class 'users.models.UserModel'>

    def test_00_valid_data_user_signup(self, client, django_user_model):
        outbox_before_count = len(mail.outbox)
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.URL_SIGNUP}` не найден. Проверьте настройки '
            'в *urls.py*.'
        )
    
        assert response.status_code == HTTPStatus.OK, (
            'POST-запрос с корректными данными, отправленный на эндпоинт '
            f'`{self.URL_SIGNUP}`, должен вернуть ответ со статусом 200.'
        )
>       assert response.json() == valid_data, (
            'POST-запрос с корректными данными, отправленный на эндпоинт '
            f'`{self.URL_SIGNUP}`, должен вернуть ответ, содержащий '
            'информацию о `username` и `email` созданного пользователя.'
        )
E       AssertionError: POST-запрос с корректными данными, отправленный на эндпоинт `/api/v1/auth/signup/`, должен вернуть ответ, содержащий информацию о `username` и `email` созданного пользователя.
E       assert {'message': 'Код подтверждения отправлен на указанную почту'} == {'email': 'valid@yamdb.fake', 'username': 'valid_username'}
E         Left contains 1 more item:
E         {'message': 'Код подтверждения отправлен на указанную почту'}
E         Right contains 2 more items:
E         {'email': 'valid@yamdb.fake', 'username': 'valid_username'}
E         Full diff:
E         - {'email': 'valid@yamdb.fake', 'username': 'valid_username'}
E         + {'message': 'Код подтверждения отправлен на указанную почту'}

tests\test_00_user_registration.py:126: AssertionError
_________ Test00UserRegistration.test_00_valid_data_admin_create_user _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E98F41B20>
admin_client = <rest_framework.test.APIClient object at 0x0000019E98F41DF0>
django_user_model = <class 'users.models.UserModel'>

    def test_00_valid_data_admin_create_user(self,
                                             admin_client,
                                             django_user_model):
        outbox_before_count = len(mail.outbox)
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
        response = admin_client.post(
            self.URL_ADMIN_CREATE_USER, data=valid_data
        )
        outbox_after = mail.outbox
    
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.URL_ADMIN_CREATE_USER}` не найден. Проверьте '
            'настройки в *urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/users/` не найден. Проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_00_user_registration.py:166: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data0-messege0] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E99075C10>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99085790>
data = {'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake', 'username': 'valid-username'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.URL_ADMIN_CREATE_USER, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_ADMIN_CREATE_USER, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data1-messege1] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E99091670>
admin_client = <rest_framework.test.APIClient object at 0x0000019E990B3AF0>
data = {'email': 'valid-email@yamdb.fake', 'username': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.URL_ADMIN_CREATE_USER, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_ADMIN_CREATE_USER, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data2-messege2] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E99091A60>
admin_client = <rest_framework.test.APIClient object at 0x0000019E98F411C0>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\Z',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.URL_ADMIN_CREATE_USER, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_ADMIN_CREATE_USER, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\Z
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data3-messege3] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E99091400>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99099400>
data = {'email': 'valid-email@yamdb.fake', 'first_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.URL_ADMIN_CREATE_USER, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_ADMIN_CREATE_USER, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data4-messege4] _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E99091FD0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E990F74F0>
data = {'email': 'valid-email@yamdb.fake', 'last_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.',)
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_00_admin_create_user_length_and_simbols_validation(
            self, admin_client, data, messege, django_user_model
    ):
        request_method = 'POST'
        users_count = django_user_model.objects.count()
        response = admin_client.post(self.URL_ADMIN_CREATE_USER, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.URL_ADMIN_CREATE_USER, request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:211: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E990F78E0>
client = <django.test.client.Client object at 0x0000019E990B3220>

    def test_00_obtain_jwt_token_invalid_data(self, client):
        response = client.post(self.URL_TOKEN)
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.URL_TOKEN}` не найдена. Проверьте настройки в '
            '*urls.py*.'
        )
    
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос без данных, отправленный на эндпоинт '
            f'`{self.URL_TOKEN}`, возвращает ответ со статусом 400.'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.URL_TOKEN, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос, отправленный на эндпоинт '
            f'`{self.URL_TOKEN}`и не содержащий информации о `username`, '
            'возвращает ответ со статусом 400.'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.URL_TOKEN, data=invalid_data)
>       assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Проверьте, что POST-запрос с несуществующим `username`, '
            f'отправленный на эндпоинт `{self.URL_TOKEN}`, возвращает ответ '
            'со статусом 404.'
        )
E       AssertionError: Проверьте, что POST-запрос с несуществующим `username`, отправленный на эндпоинт `/api/v1/auth/token/`, возвращает ответ со статусом 404.
E       assert 400 == <HTTPStatus.NOT_FOUND: 404>
E         +400
E         -<HTTPStatus.NOT_FOUND: 404>

tests\test_00_user_registration.py:250: AssertionError
---------------------------- Captured stdout call -----------------------------
Serializer errors: {'username': [ErrorDetail(string='Обязательное поле.', code='required')], 'confirmation_code': [ErrorDetail(string='Обязательное поле.', code='required')]}
Serializer errors: {'username': [ErrorDetail(string='Обязательное поле.', code='required')], 'confirmation_code': [ErrorDetail(string='Убедитесь, что это значение меньше либо равно 9999.', code='max_value')]}
Serializer errors: {'confirmation_code': [ErrorDetail(string='Убедитесь, что это значение меньше либо равно 9999.', code='max_value')]}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
___ Test00UserRegistration.test_get_new_confirmation_code_for_existing_user ___

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E990A4AF0>
client = <django.test.client.Client object at 0x0000019E990CF430>

    def test_get_new_confirmation_code_for_existing_user(self, client):
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        response = client.post(self.URL_SIGNUP, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что POST-запрос с корректными данными, отправленный '
            f'на эндпоинт `{self.URL_SIGNUP}`, возвращает ответ со статусом '
            '200.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что повторный POST-запрос к `{self.URL_SIGNUP}` с '
            'данными зарегистрированного пользователя возвращает ответ со '
            'статусом 200.'
        )
E       AssertionError: Проверьте, что повторный POST-запрос к `/api/v1/auth/signup/` с данными зарегистрированного пользователя возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:351: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_get_confirmation_code_for_user_created_by_admin _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000019E990E87C0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E990A0700>
client = <django.test.client.Client object at 0x0000019E990871F0>
django_user_model = <class 'users.models.UserModel'>

    def test_get_confirmation_code_for_user_created_by_admin(
            self, admin_client, client, django_user_model
    ):
        user_cnt = django_user_model.objects.count()
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        admin_client.post(self.URL_ADMIN_CREATE_USER, data=valid_data)
>       assert (user_cnt + 1) == django_user_model.objects.count(), (
            'Если POST-запрос администратора на эндпоинт '
            f'`{self.URL_ADMIN_CREATE_USER}` содержит корректные данные - '
            'должен быть создан новый пользователь.'
        )
E       AssertionError: Если POST-запрос администратора на эндпоинт `/api/v1/users/` содержит корректные данные - должен быть создан новый пользователь.
E       assert 2 == 1
E         +2
E         -1

tests\test_00_user_registration.py:366: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
________________ Test01UserAPI.test_01_users_not_authenticated ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990A4160>
client = <django.test.client.Client object at 0x0000019E9911A370>

    def test_01_users_not_authenticated(self, client):
        response = client.get(self.USERS_URL)
    
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.USERS_URL}` не найден. Проверьте настройки в '
            '*urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/users/` не найден. Проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_01_users.py:41: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
____________________ Test01UserAPI.test_04_users_get_admin ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990A4880>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99117940>
admin = <UserModel: TestAdmin>

    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get(self.USERS_URL)
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.USERS_URL}` не найден. Проверьте настройки в '
            '*urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/users/` не найден. Проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_01_users.py:80: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search __________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E991176D0>
user = <UserModel: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9912B7F0>
admin = <UserModel: TestAdmin>
django_user_model = <class 'users.models.UserModel'>

    def test_04_02_users_get_search(self, user, admin_client,
                                    admin, django_user_model):
        search_url = f'{self.USERS_URL}?search={admin.username}'
        response = admin_client.get(search_url)
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.USERS_URL}'
            '?search={username}` не найден. Проверьте настройки в *urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/users/?search={username}` не найден. Проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_01_users.py:103: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
________________ Test01UserAPI.test_04_01_users_get_admin_only ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E9912B100>
user_client = <rest_framework.test.APIClient object at 0x0000019E990A5EB0>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E990A56D0>

    def test_04_01_users_get_admin_only(self, user_client, moderator_client):
        for client in (user_client, moderator_client):
            response = client.get(self.USERS_URL)
>           assert response.status_code != HTTPStatus.NOT_FOUND, (
                f'Эндпоинт `{self.USERS_URL}` не найден. Проверьте настройки '
                'в *urls.py*.'
            )
E           AssertionError: Эндпоинт `/api/v1/users/` не найден. Проверьте настройки в *urls.py*.
E           assert 404 != <HTTPStatus.NOT_FOUND: 404>
E            +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code
E            +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_01_users.py:140: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
___________ Test01UserAPI.test_05_01_users_post_admin_bad_requests ____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E991369D0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E990C0160>
admin = <UserModel: TestAdmin>

    def test_05_01_users_post_admin_bad_requests(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post(self.USERS_URL, data=empty_data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            f'Если POST-запрос администратора к `{self.USERS_URL}` '
            'не содержит необходимых данных - должен вернуться ответ со '
            'статусом 400.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` не содержит необходимых данных - должен вернуться ответ со статусом 400.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:153: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_______ Test01UserAPI.test_05_02_users_post_admin_user_creation[data0-] _______

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990C02B0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E990A5970>
data = {'email': 'testuser2@yamdb.fake', 'role': 'user', 'username': 'TestUser_2'}
msg_modifier = '', django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize('data,msg_modifier', VALID_DATA_FOR_USER_CREATION)
    def test_05_02_users_post_admin_user_creation(self, admin_client,
                                                  data, msg_modifier,
                                                  django_user_model):
        response = admin_client.post(self.USERS_URL, data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{self.USERS_URL}` содержит '
            f'корректные данные {msg_modifier}- должен вернуться ответ со '
            'статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 404 == <HTTPStatus.CREATED: 201>
E         +404
E         -<HTTPStatus.CREATED: 201>

tests\test_01_users.py:208: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_ Test01UserAPI.test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] _

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990FDB50>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9916B640>
data = {'email': 'testuser3@yamdb.fake', 'username': 'TestUser_3'}
msg_modifier = 'без указания роли нового пользователя '
django_user_model = <class 'users.models.UserModel'>

    @pytest.mark.parametrize('data,msg_modifier', VALID_DATA_FOR_USER_CREATION)
    def test_05_02_users_post_admin_user_creation(self, admin_client,
                                                  data, msg_modifier,
                                                  django_user_model):
        response = admin_client.post(self.USERS_URL, data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{self.USERS_URL}` содержит '
            f'корректные данные {msg_modifier}- должен вернуться ответ со '
            'статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные без указания роли нового пользователя - должен вернуться ответ со статусом 201.
E       assert 404 == <HTTPStatus.CREATED: 201>
E         +404
E         -<HTTPStatus.CREATED: 201>

tests\test_01_users.py:208: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
____________ Test01UserAPI.test_05_03_users_post_response_has_data ____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E991A1DC0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E991490A0>

    def test_05_03_users_post_response_has_data(self, admin_client):
        data = {
            'first_name': 'First Name',
            'last_name': 'Last Name',
            'username': 'test_username',
            'bio': 'test bio',
            'role': 'moderator',
            'email': 'testmoder2@yamdb.fake'
        }
        response = admin_client.post(self.USERS_URL, data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{self.USERS_URL}` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 404 == <HTTPStatus.CREATED: 201>
E         +404
E         -<HTTPStatus.CREATED: 201>

tests\test_01_users.py:236: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_____________ Test01UserAPI.test_05_04_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E9912B910>
user_superuser_client = <rest_framework.test.APIClient object at 0x0000019E9915E0A0>
django_user_model = <class 'users.models.UserModel'>

    def test_05_04_users_post_user_superuser(self, user_superuser_client,
                                             django_user_model):
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post(
            self.USERS_URL, data=valid_data
        )
>       assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос суперпользователя к `{self.USERS_URL}` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос суперпользователя к `/api/v1/users/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 404 == <HTTPStatus.CREATED: 201>
E         +404
E         -<HTTPStatus.CREATED: 201>

tests\test_01_users.py:263: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E99149370>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99167E80>
moderator = <UserModel: TestModerator>

    def test_06_users_username_get_admin(self, admin_client, moderator):
        response = admin_client.get(f'{self.USERS_URL}{moderator.username}/')
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.USERS_URL}'
            '{username}/` не найден. Проверьте настройки в *urls.py*.'
        )
        assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что GET-запрос администратора к `{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 200.'
        )
    
        response_data = response.json()
        expected_keys = (
            'first_name', 'last_name', 'username', 'bio', 'role', 'email'
        )
        for key in expected_keys:
>           assert response_data.get(key) == getattr(moderator, key), (
                'Проверьте, что ответ на GET-запрос администратора к '
                f'`{self.USERS_URL}'
                '{username}/` содержит данные пользователя.'
                f'Сейчас ключ {key} отсутствует в ответе либо содержит '
                'некорректные данные.'
            )
E           AssertionError: Проверьте, что ответ на GET-запрос администратора к `/api/v1/users/{username}/` содержит данные пользователя.Сейчас ключ username отсутствует в ответе либо содержит некорректные данные.
E           assert 'TestAdmin' == 'TestModerator'
E             - TestModerator
E             + TestAdmin

tests\test_01_users.py:293: AssertionError
_____________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E99167AF0>
user_client = <rest_framework.test.APIClient object at 0x0000019E98F0F9A0>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E98C19250>
admin = <UserModel: TestAdmin>

    def test_06_users_username_get_not_admin(self, user_client,
                                             moderator_client, admin):
        for test_client in (user_client, moderator_client):
            response = test_client.get(f'{self.USERS_URL}{admin.username}/')
            assert response.status_code != HTTPStatus.NOT_FOUND, (
                f'Эндпоинт `{self.USERS_URL}'
                '{username}/` не найден. Проверьте настройки в *urls.py*.'
            )
>           assert response.status_code == HTTPStatus.FORBIDDEN, (
                'GET-запрос пользователя, не обладающего правами '
                f'администратора, отправленный к `{self.USERS_URL}'
                '{username}/`, должен вернуть ответ со статусом 403.'
            )
E           AssertionError: GET-запрос пользователя, не обладающего правами администратора, отправленный к `/api/v1/users/{username}/`, должен вернуть ответ со статусом 403.
E           assert 200 == <HTTPStatus.FORBIDDEN: 403>
E             +200
E             -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:309: AssertionError
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E98BC99A0>
user = <UserModel: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9909F250>
django_user_model = <class 'users.models.UserModel'>

    def test_07_01_users_username_patch_admin(self, user, admin_client,
                                              django_user_model):
        data = {
            'first_name': 'Admin',
            'last_name': 'Test',
            'bio': 'description'
        }
        response = admin_client.patch(
            f'{self.USERS_URL}{user.username}/', data=data
        )
        assert response.status_code == HTTPStatus.OK, (
            'Если PATCH-запрос администратора, отправленный к '
            f'`{self.USERS_URL}'
            '{username}/`, содержит корректные данные - должен вернуться '
            'ответ со статусом 200.'
        )
        user = django_user_model.objects.get(username=user.username)
        for key in data:
>           assert getattr(user, key) == data[key], (
                'Проверьте, что PATCH-запрос администратора к '
                f'`{self.USERS_URL}'
                '{username}/` может изменять данные другого пользователя.'
            )
E           AssertionError: Проверьте, что PATCH-запрос администратора к `/api/v1/users/{username}/` может изменять данные другого пользователя.
E           assert '' == 'Admin'
E             - Admin

tests\test_01_users.py:333: AssertionError
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E9909F6D0>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E99087C10>
user = <UserModel: TestUser>
django_user_model = <class 'users.models.UserModel'>

    def test_07_02_users_username_patch_moderator(self,
                                                  moderator_client,
                                                  user,
                                                  django_user_model):
        response = moderator_client.patch(
            f'{self.USERS_URL}{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            f'Проверьте, что PATCH-запрос модератора к `{self.USERS_URL}'
            '{username}/` для профиля другого пользователя возвращает ответ '
            'со статусом 403.'
        )
E       AssertionError: Проверьте, что PATCH-запрос модератора к `/api/v1/users/{username}/` для профиля другого пользователя возвращает ответ со статусом 403.
E       assert 200 == <HTTPStatus.FORBIDDEN: 403>
E         +200
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:379: AssertionError
_____________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E9912B970>
user_client = <rest_framework.test.APIClient object at 0x0000019E98C76EE0>
user = <UserModel: TestUser>
django_user_model = <class 'users.models.UserModel'>

    def test_07_03_users_username_patch_user(self, user_client, user,
                                             django_user_model):
        response = user_client.patch(
            f'{self.USERS_URL}{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            'Проверьте, что PATCH-запрос пользователя с ролью `user` к '
            f'`{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что PATCH-запрос пользователя с ролью `user` к `/api/v1/users/{username}/` возвращает ответ со статусом 403.
E       assert 200 == <HTTPStatus.FORBIDDEN: 403>
E         +200
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:395: AssertionError
___________ Test01UserAPI.test_07_05_users_username_put_not_allowed ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990E8760>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99117AF0>
user = <UserModel: TestUser>

    def test_07_05_users_username_put_not_allowed(self, admin_client, user):
        response = admin_client.put(
            f'{self.USERS_URL}{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            f'Проверьте, что PUT-запрос к `{self.USERS_URL}'
            '{username}/` не предусмотрен и возвращает статус 405.'
        )
E       AssertionError: Проверьте, что PUT-запрос к `/api/v1/users/{username}/` не предусмотрен и возвращает статус 405.
E       assert 400 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +400
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests\test_01_users.py:412: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/TestUser/
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990E8F70>
user = <UserModel: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x0000019E990996A0>
django_user_model = <class 'users.models.UserModel'>

    def test_08_01_users_username_delete_admin(self, user, admin_client,
                                               django_user_model):
        users_cnt = django_user_model.objects.count()
        response = admin_client.delete(f'{self.USERS_URL}{user.username}/')
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            f'Проверьте, что DELETE-запрос администратора к `{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос администратора к `/api/v1/users/{username}/` возвращает ответ со статусом 204.
E       assert 405 == <HTTPStatus.NO_CONTENT: 204>
E         +405
E         -<HTTPStatus.NO_CONTENT: 204>

tests\test_01_users.py:421: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E9909FF10>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E990FD2E0>
user = <UserModel: TestUser>
django_user_model = <class 'users.models.UserModel'>

    def test_08_02_users_username_delete_moderator(self, moderator_client,
                                                   user, django_user_model):
        users_cnt = django_user_model.objects.count()
        response = moderator_client.delete(f'{self.USERS_URL}{user.username}/')
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            f'Проверьте, что DELETE-запрос модератора к `{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что DELETE-запрос модератора к `/api/v1/users/{username}/` возвращает ответ со статусом 403.
E       assert 405 == <HTTPStatus.FORBIDDEN: 403>
E         +405
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:434: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_03_users_username_delete_user _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E991292B0>
user_client = <rest_framework.test.APIClient object at 0x0000019E990A4B80>
user = <UserModel: TestUser>
django_user_model = <class 'users.models.UserModel'>

    def test_08_03_users_username_delete_user(self, user_client, user,
                                              django_user_model):
        users_cnt = django_user_model.objects.count()
        response = user_client.delete(f'{self.USERS_URL}{user.username}/')
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            'Проверьте, что DELETE-запрос пользователя с ролью `user` к '
            f'`{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что DELETE-запрос пользователя с ролью `user` к `/api/v1/users/{username}/` возвращает ответ со статусом 403.
E       assert 405 == <HTTPStatus.FORBIDDEN: 403>
E         +405
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:447: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E990A4610>
user_superuser_client = <rest_framework.test.APIClient object at 0x0000019E990E8430>
user = <UserModel: TestUser>
django_user_model = <class 'users.models.UserModel'>

    def test_08_04_users_username_delete_superuser(self, user_superuser_client,
                                                   user, django_user_model):
        users_cnt = django_user_model.objects.count()
        response = user_superuser_client.delete(
            f'{self.USERS_URL}{user.username}/'
        )
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            'Проверьте, что DELETE-запрос суперпользователя к '
            f'`{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос суперпользователя к `/api/v1/users/{username}/` возвращает ответ со статусом 204.
E       assert 405 == <HTTPStatus.NO_CONTENT: 204>
E         +405
E         -<HTTPStatus.NO_CONTENT: 204>

tests\test_01_users.py:464: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/users/TestUser/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data2-messege2] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E99099B20>
user_client = <rest_framework.test.APIClient object at 0x0000019E99199C40>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\Z',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\Z
E       assert 200 == <HTTPStatus.BAD_REQUEST: 400>
E         +200
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
_______ Test01UserAPI.test_10_03_users_me_patch_change_role_not_allowed _______

self = <tests.test_01_users.Test01UserAPI object at 0x0000019E98F37DF0>
user_client = <rest_framework.test.APIClient object at 0x0000019E9920A520>
user = <UserModel: TestUser>
django_user_model = <class 'users.models.UserModel'>

    def test_10_03_users_me_patch_change_role_not_allowed(self,
                                                          user_client,
                                                          user,
                                                          django_user_model):
        response = user_client.patch(
            f'{self.USERS_ME_URL}', data=self.PATCH_DATA
        )
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что PATCH-запрос пользователя с ролью `user` к '
            f'`{self.USERS_ME_URL}` возвращает ответ со статусом 200.'
        )
    
        current_role = user.role
        data = {
            'role': 'admin'
        }
        response = user_client.patch(f'{self.USERS_ME_URL}', data=data)
        user = django_user_model.objects.filter(username=user.username).first()
>       assert user.role == current_role, (
            f'Проверьте, что PATCH-запрос к `{self.USERS_ME_URL}` с ключом '
            '`role` не изменяет роль пользователя.'
        )
E       AssertionError: Проверьте, что PATCH-запрос к `/api/v1/users/me/` с ключом `role` не изменяет роль пользователя.
E       assert 'admin' == 'user'
E         - user
E         + admin

tests\test_01_users.py:563: AssertionError
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000019E990A0040>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99306CA0>
client = <django.test.client.Client object at 0x0000019E99306EB0>

    def test_02_title_admin(self, admin_client, client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        title_count = 0
    
        assert_msg = (
            f'Если POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит некорректные данные - должен вернуться ответ со '
            'статусом 400.'
        )
        data = {}
        response = admin_client.post(self.TITLES_URL, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        invalid_data = {
            'name': 'Угнать за 60 секунд',
            'year': 'дветыщи',
            'genre': [genres[1]['slug']],
            'category': categories[1]['slug'],
            'description': 'Угонял машины всю ночь и немного подустал.'
        }
        response = admin_client.post(self.TITLES_URL, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, assert_msg
    
        post_data_1 = {
            'name': 'Мост через реку Квай',
            'year': 1957,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'Рон Свонсон рекомендует.'
        }
        response = admin_client.post(self.TITLES_URL, data=post_data_1)
>       assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests\test_04_title.py:60: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000019E992F6D90>
client = <django.test.client.Client object at 0x0000019E992E7550>
admin_client = <rest_framework.test.APIClient object at 0x0000019E992C3970>

    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, _ = create_titles(admin_client)

tests\test_04_title.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E992C3970>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
____________ Test04TitleAPI.test_04_titles_name_length_validation _____________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000019E9930A6A0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E992F61F0>

    def test_04_titles_name_length_validation(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
    
        data = {
            'name': 'It`s Over 9000!' + '!' * 242,
            'year': 1989,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'Dragon Ball Z'
        }
        response = admin_client.post(self.TITLES_URL, data=data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Убедитесь, что при обработке POST-запроса администратора к '
            f'`{self.TITLES_URL}` проверяется длина поля `name`: название '
            'произведения не может быть длиннее 256 символов.'
        )
    
        data = {
            'name': 'Мост через реку Квай',
            'year': 1957,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'Рон Свонсон рекомендует.'
        }
        response = admin_client.post(self.TITLES_URL, data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            f'Если POST-запрос администратора к `{self.TITLES_URL}` '
            'содержит корректные данные - должен вернуться ответ со статусом '
            '201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.
E       assert 400 == <HTTPStatus.CREATED: 201>
E         +400
E         -<HTTPStatus.CREATED: 201>

tests\test_04_title.py:304: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_______________ Test04TitleAPI.test_05_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000019E99249700>
client = <django.test.client.Client object at 0x0000019E992DBD60>
user_client = <rest_framework.test.APIClient object at 0x0000019E992E10D0>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E992E11C0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E992E14F0>

    def test_05_titles_check_permission(self, client, user_client,
                                        moderator_client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:327: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E992E14F0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
____________ Test04TitleAPI.test_06_titles_detail_put_not_allowed _____________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000019E990758B0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99117100>
user = <UserModel: TestUser>

    def test_06_titles_detail_put_not_allowed(self, admin_client, user):
>       titles, _, _ = create_titles(admin_client)

tests\test_04_title.py:345: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E99117100>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000019E99129580>
client = <django.test.client.Client object at 0x0000019E9928B610>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9928B520>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E9928B460>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E992B4D00>
moderator = <UserModel: TestModerator>

    def test_01_review_not_auth(self, client, admin_client, admin, user_client,
                                user, moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E9928B520>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_____________________ Test05ReviewAPI.test_02_review_post _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000019E9928B9D0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9911A3D0>
user_client = <rest_framework.test.APIClient object at 0x0000019E9911C9D0>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E9911CE20>
admin = <UserModel: TestAdmin>

    def test_02_review_post(self, admin_client, user_client,
                            moderator_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E9911A3D0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
__________________ Test05ReviewAPI.test_03_review_detail_get __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000019E990C0850>
client = <django.test.client.Client object at 0x0000019E9929FF70>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9929F190>
admin = <UserModel: TestAdmin>, user = <UserModel: TestUser>
user_client = <rest_framework.test.APIClient object at 0x0000019E992C3790>
moderator = <UserModel: TestModerator>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E992C3430>

    def test_03_review_detail_get(self, client, admin_client, admin, user,
                                  user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:233: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E9929F190>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_________________ Test05ReviewAPI.test_04_review_detail_user __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000019E9929F9D0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99318C40>
admin = <UserModel: TestAdmin>, user = <UserModel: TestUser>
user_client = <rest_framework.test.APIClient object at 0x0000019E99318670>
moderator = <UserModel: TestModerator>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E99318940>

    def test_04_review_detail_user(self, admin_client, admin, user,
                                   user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E99318C40>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_________ Test05ReviewAPI.test_05_reviews_detail_moderator_and_admin __________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000019E992B4CA0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E991B7970>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E991B7910>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E990A0BB0>
moderator = <UserModel: TestModerator>

    def test_05_reviews_detail_moderator_and_admin(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E991B7970>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
___________ Test05ReviewAPI.test_06_reviews_detail_put_not_allowed ____________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000019E991B7A90>
admin_client = <rest_framework.test.APIClient object at 0x0000019E991293A0>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E992DB4F0>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E992DBD90>
moderator = <UserModel: TestModerator>

    def test_06_reviews_detail_put_not_allowed(
            self, admin_client, admin, user_client, user, moderator_client,
            moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_05_review.py:403: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E991293A0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E992E7EB0>
client = <django.test.client.Client object at 0x0000019E9924CFD0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9924CC10>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E99296DC0>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E99296460>
moderator = <UserModel: TestModerator>

    def test_01_comment_not_auth(self, client, admin_client, admin,
                                 user_client, user, moderator_client,
                                 moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_06_comment.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E9924CC10>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E9924C6A0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99085CD0>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E993342B0>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E993344C0>
moderator = <UserModel: TestModerator>

    def test_02_comment(self, admin_client, admin, user_client, user,
                        moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       reviews, titles = create_reviews(admin_client, author_map)

tests\test_06_comment.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E99085CD0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_________________ Test06CommentAPI.test_03_comment_detail_get _________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E99334CD0>
client = <django.test.client.Client object at 0x0000019E990877F0>
admin_client = <rest_framework.test.APIClient object at 0x0000019E99087DF0>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E99087910>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E99318700>
moderator = <UserModel: TestModerator>

    def test_03_comment_detail_get(self, client, admin_client, admin,
                                   user_client, user, moderator_client,
                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E99087DF0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_________ Test06CommentAPI.test_04_comment_detail__user_patch_delete __________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E99087850>
admin_client = <rest_framework.test.APIClient object at 0x0000019E993342B0>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E993408E0>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E99340B80>
moderator = <UserModel: TestModerator>

    def test_04_comment_detail__user_patch_delete(self, admin_client, admin,
                                                  user_client, user,
                                                  moderator_client,
                                                  moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E993342B0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
_________ Test06CommentAPI.test_05_comment_detail_admin_and_moderator _________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E990C2190>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9929B6A0>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E990B3E80>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E990B3760>
moderator = <UserModel: TestModerator>

    def test_05_comment_detail_admin_and_moderator(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E9929B6A0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
______________ Test06CommentAPI.test_06_comment_detail_not_auth _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E9909FA00>
admin_client = <rest_framework.test.APIClient object at 0x0000019E9914F910>
admin = <UserModel: TestAdmin>
client = <django.test.client.Client object at 0x0000019E9918F070>
user_client = <rest_framework.test.APIClient object at 0x0000019E9918FB50>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E9918F4F0>
moderator = <UserModel: TestModerator>

    def test_06_comment_detail_not_auth(self, admin_client, admin, client,
                                        user_client, user, moderator_client,
                                        moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E9914F910>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
___________ Test06CommentAPI.test_07_comment_detail_put_not_allowed ___________

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000019E98BC9220>
admin_client = <rest_framework.test.APIClient object at 0x0000019E992C3370>
admin = <UserModel: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000019E992C3C70>
user = <UserModel: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000019E992C3AF0>
moderator = <UserModel: TestModerator>

    def test_07_comment_detail_put_not_allowed(
            self, admin_client, admin, user_client, user, moderator_client,
            moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:267: in create_comments
    reviews, titles = create_reviews(admin_client, authors_map)
tests\utils.py:248: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

admin_client = <rest_framework.test.APIClient object at 0x0000019E992C3370>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {
            'name': 'Терминатор',
            'year': 1984,
            'genre': [genres[0]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'I`ll be back'
        }
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == HTTPStatus.CREATED, (
            'Если POST-запрос администратора к `/api/v1/titles/` содержит '
            'корректные данные - должен вернуться ответ со статусом 201.'
        )
E       AssertionError: Если POST-запрос администратора к `/api/v1/titles/` содержит корректные данные - должен вернуться ответ со статусом 201.

tests\utils.py:228: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
============================== warnings summary ===============================
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0]
  E:\Dev\api_yamdb\venv\lib\site-packages\django\core\cache\backends\base.py:250: CacheKeyWarning: Cache key will cause errors if used with memcached: ':1:confirmation_code_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake' (longer than 250)
    warnings.warn(warning, CacheKeyWarning)

tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin
  E:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Category'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth
tests/test_03_genre.py::Test03GenreAPI::test_02_genre
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete
  E:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Genre'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth
  E:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Title'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4]
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-]
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ]
FAILED tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data
FAILED tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2]
FAILED tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - Assert...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation
FAILED tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission
FAILED tests/test_04_title.py::Test04TitleAPI::test_06_titles_detail_put_not_allowed
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - As...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_post - Assert...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get - ...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user
FAILED tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin
FAILED tests/test_05_review.py::Test05ReviewAPI::test_06_reviews_detail_put_not_allowed
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - Assertio...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete
FAILED tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator
FAILED tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_07_comment_detail_put_not_allowed
================= 51 failed, 29 passed, 8 warnings in 18.82s ==================
